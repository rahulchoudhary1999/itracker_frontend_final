{"ast":null,"code":"import { environment } from \"../environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let SecurityService = /*#__PURE__*/(() => {\n  class SecurityService {\n    constructor(http) {\n      this.http = http;\n      this.isAuthenticated = false;\n      this.authorizeEndpoint = '/oauth2/authorization/google';\n      this.tokenEndpoint = '/login/oauth2/code/google';\n      this.baseUrl = environment.baseUrl;\n      this.tokenKey = 'token';\n    }\n\n    login() {\n      window.open(this.baseUrl + this.authorizeEndpoint, '_self');\n    }\n\n    updateToken(token) {\n      localStorage.setItem(this.tokenKey, token);\n    }\n\n    fetchToken(code, state) {\n      return this.http.get(this.baseUrl + this.tokenEndpoint + '?code=' + code + '&state=' + state);\n    }\n\n    getToken() {\n      return localStorage.getItem(this.tokenKey);\n    }\n\n    isLoggedIn() {\n      const token = this.getToken();\n\n      if (token != null) {\n        this.isAuthenticated = true;\n      }\n\n      return token != null;\n    }\n\n    removeToken() {\n      localStorage.removeItem(this.tokenKey);\n    }\n\n    logout() {\n      this.isAuthenticated = false;\n      return this.http.post(this.baseUrl + '/logout', this.removeToken());\n    }\n\n  }\n\n  SecurityService.ɵfac = function SecurityService_Factory(t) {\n    return new (t || SecurityService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  SecurityService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SecurityService,\n    factory: SecurityService.ɵfac,\n    providedIn: 'root'\n  });\n  return SecurityService;\n})();","map":null,"metadata":{},"sourceType":"module"}